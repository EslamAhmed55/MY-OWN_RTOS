
STM32_Drivers_BackUp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001154  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080012d8  080012d8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080012d8  080012d8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080012d8  080012d8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080012d8  080012d8  000112d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080012dc  080012dc  000112dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080012e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000004  080012e4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e8  080012e4  000205e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004467  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f95  00000000  00000000  00024494  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001774  00000000  00000000  00025429  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000390  00000000  00000000  00026ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000308  00000000  00000000  00026f30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003c11  00000000  00000000  00027238  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000041d6  00000000  00000000  0002ae49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000142e0  00000000  00000000  0002f01f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000be  00000000  00000000  000432ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c20  00000000  00000000  000433c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	0800126c 	.word	0x0800126c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	0800126c 	.word	0x0800126c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "CortexMX_OS_Porting.h"

unsigned char SysTickLED;

void HardFault_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}
void MemManage_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}
void BusFault_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}
void UsageFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:
}

__attribute ((naked)) void SVC_Handler()
{
	__asm("tst lr,#4  \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 bb99 	b.w	8000978 <OS_SVC>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC");
}
 8000246:	bf00      	nop

08000248 <HW_init>:


void HW_init()
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	// X count -> 1 ms
	// X = 8000 count

	//decrease PendSV interrupt priority to be smaller than or equal SysTick Timer
	//SysTick have a priority 14
	__NVIC_SetPriority(PendSV_IRQn, 15);
 800024c:	210f      	movs	r1, #15
 800024e:	f06f 0001 	mvn.w	r0, #1
 8000252:	f7ff ff97 	bl	8000184 <__NVIC_SetPriority>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <Trigger_OS_PendSV>:

void Trigger_OS_PendSV()
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a03      	ldr	r2, [pc, #12]	; (8000274 <Trigger_OS_PendSV+0x18>)
 8000266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800026a:	6053      	str	r3, [r2, #4]

}
 800026c:	bf00      	nop
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr
 8000274:	e000ed00 	.word	0xe000ed00

08000278 <Start_Ticker>:

void Start_Ticker()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//This clock tree should be defined in HW_init()
	// 8 MHZ
	// 1 count -> 0.125 us
	// X count -> 1 ms =====> X = 8000 count
	SysTick_Config(8000);
 800027c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000280:	f7ff ffaa 	bl	80001d8 <SysTick_Config>

}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}

08000288 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SysTickLED ^= 1;
 800028c:	4b07      	ldr	r3, [pc, #28]	; (80002ac <SysTick_Handler+0x24>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b05      	ldr	r3, [pc, #20]	; (80002ac <SysTick_Handler+0x24>)
 8000298:	701a      	strb	r2, [r3, #0]

	MYRTOS_Update_tasksWaittingTime();
 800029a:	f000 fc07 	bl	8000aac <MYRTOS_Update_tasksWaittingTime>
	//determine Pcurrent & Pnext
	Decide_whatNext();
 800029e:	f000 fb19 	bl	80008d4 <Decide_whatNext>
	//switch Context & restore
	Trigger_OS_PendSV();
 80002a2:	f7ff ffdb 	bl	800025c <Trigger_OS_PendSV>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000d0 	.word	0x200000d0

080002b0 <FIFO_init>:
 */

#include "MYRTOS_FIFO.h"

Buffer_status FIFO_init (FIFO_Buf_t* fifo, element_type* buff , unsigned int length)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	if(!buff)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <FIFO_init+0x16>
		return FIFO_NULL;
 80002c2:	2303      	movs	r3, #3
 80002c4:	e011      	b.n	80002ea <FIFO_init+0x3a>

	fifo->base = buff;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68da      	ldr	r2, [r3, #12]
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	68da      	ldr	r2, [r3, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	687a      	ldr	r2, [r7, #4]
 80002e0:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]

	return FIFO_NO_ERROR;
 80002e8:	2300      	movs	r3, #0
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr

080002f4 <FIFO_enqueue>:

Buffer_status FIFO_enqueue (FIFO_Buf_t* fifo, element_type item)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
	// FIFO null
	if ( !fifo->base || !fifo->length )
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d003      	beq.n	800030e <FIFO_enqueue+0x1a>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	691b      	ldr	r3, [r3, #16]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d101      	bne.n	8000312 <FIFO_enqueue+0x1e>
		return FIFO_NULL;
 800030e:	2303      	movs	r3, #3
 8000310:	e02d      	b.n	800036e <FIFO_enqueue+0x7a>

	// FIFO full
	if ((fifo->head == fifo->length) && (fifo->counter == fifo->length))
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	6912      	ldr	r2, [r2, #16]
 800031a:	4293      	cmp	r3, r2
 800031c:	d107      	bne.n	800032e <FIFO_enqueue+0x3a>
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	429a      	cmp	r2, r3
 8000328:	d101      	bne.n	800032e <FIFO_enqueue+0x3a>
		return FIFO_FULL;
 800032a:	2301      	movs	r3, #1
 800032c:	e01f      	b.n	800036e <FIFO_enqueue+0x7a>

	*(fifo->tail) = item;
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	683a      	ldr	r2, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]

	// for circular fifo enqueue
	if (fifo->tail == (((unsigned int)fifo->base + (4*fifo->length)) -4 ))
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68d2      	ldr	r2, [r2, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	6912      	ldr	r2, [r2, #16]
 800034e:	0092      	lsls	r2, r2, #2
 8000350:	440a      	add	r2, r1
 8000352:	3a04      	subs	r2, #4
 8000354:	4293      	cmp	r3, r2
 8000356:	d104      	bne.n	8000362 <FIFO_enqueue+0x6e>
		fifo->tail = fifo->base;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	e004      	b.n	800036c <FIFO_enqueue+0x78>
	else
		fifo->tail++;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	689b      	ldr	r3, [r3, #8]
 8000366:	1d1a      	adds	r2, r3, #4
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	609a      	str	r2, [r3, #8]

	return FIFO_NO_ERROR;
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <FIFO_dequeue>:


Buffer_status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	6039      	str	r1, [r7, #0]
	// FIFO null
	if ( !fifo->base || !fifo->length )
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d003      	beq.n	8000392 <FIFO_dequeue+0x1a>
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	691b      	ldr	r3, [r3, #16]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d101      	bne.n	8000396 <FIFO_dequeue+0x1e>
		return FIFO_NULL;
 8000392:	2303      	movs	r3, #3
 8000394:	e028      	b.n	80003e8 <FIFO_dequeue+0x70>

	// FIFO empty
	if ( fifo->head == fifo->tail )
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	685a      	ldr	r2, [r3, #4]
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d101      	bne.n	80003a6 <FIFO_dequeue+0x2e>
		return FIFO_EMPTY;
 80003a2:	2302      	movs	r3, #2
 80003a4:	e020      	b.n	80003e8 <FIFO_dequeue+0x70>

	*item = *(fifo->head);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	681a      	ldr	r2, [r3, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	1e5a      	subs	r2, r3, #1
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	601a      	str	r2, [r3, #0]


	// for circular fifo dequeue
	if (fifo->head == (((unsigned int)fifo->base + (4*fifo->length)) -4 ))
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	68d2      	ldr	r2, [r2, #12]
 80003c2:	4611      	mov	r1, r2
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	6912      	ldr	r2, [r2, #16]
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	440a      	add	r2, r1
 80003cc:	3a04      	subs	r2, #4
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d104      	bne.n	80003dc <FIFO_dequeue+0x64>
		fifo->head = fifo->base;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	68da      	ldr	r2, [r3, #12]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	e004      	b.n	80003e6 <FIFO_dequeue+0x6e>
	else
		fifo->head++;
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	1d1a      	adds	r2, r3, #4
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]

	return FIFO_NO_ERROR;
 80003e6:	2300      	movs	r3, #0
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <PendSV_Handler>:
{
	//====================================
	//Save the Context of the Current Task
	//====================================
	//Get the Current Task "Current PSP from CPU register" as CPU Push XPSR,......,R0
	OS_Get_PSP(OS_Control.CurrentTask->Current_PSP);
 80003f4:	4b6f      	ldr	r3, [pc, #444]	; (80005b4 <PendSV_Handler+0x1c0>)
 80003f6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80003fa:	f3ef 8009 	mrs	r0, PSP
 80003fe:	4602      	mov	r2, r0
 8000400:	619a      	str	r2, [r3, #24]

	///using this current_PSP (pointer) to store (R4 to R11)
	OS_Control.CurrentTask->Current_PSP--;
 8000402:	4b6c      	ldr	r3, [pc, #432]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000404:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000408:	699a      	ldr	r2, [r3, #24]
 800040a:	3a04      	subs	r2, #4
 800040c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r4" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800040e:	4b69      	ldr	r3, [pc, #420]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000410:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4622      	mov	r2, r4
 8000418:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800041a:	4b66      	ldr	r3, [pc, #408]	; (80005b4 <PendSV_Handler+0x1c0>)
 800041c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000420:	699a      	ldr	r2, [r3, #24]
 8000422:	3a04      	subs	r2, #4
 8000424:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r5" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000426:	4b63      	ldr	r3, [pc, #396]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000428:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	462a      	mov	r2, r5
 8000430:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000432:	4b60      	ldr	r3, [pc, #384]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000434:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000438:	699a      	ldr	r2, [r3, #24]
 800043a:	3a04      	subs	r2, #4
 800043c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r6" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800043e:	4b5d      	ldr	r3, [pc, #372]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000440:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000444:	699b      	ldr	r3, [r3, #24]
 8000446:	4632      	mov	r2, r6
 8000448:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800044a:	4b5a      	ldr	r3, [pc, #360]	; (80005b4 <PendSV_Handler+0x1c0>)
 800044c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000450:	699a      	ldr	r2, [r3, #24]
 8000452:	3a04      	subs	r2, #4
 8000454:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r7" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000456:	4b57      	ldr	r3, [pc, #348]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000458:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	463a      	mov	r2, r7
 8000460:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000462:	4b54      	ldr	r3, [pc, #336]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000464:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000468:	699a      	ldr	r2, [r3, #24]
 800046a:	3a04      	subs	r2, #4
 800046c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r8" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800046e:	4b51      	ldr	r3, [pc, #324]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000470:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4642      	mov	r2, r8
 8000478:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 800047a:	4b4e      	ldr	r3, [pc, #312]	; (80005b4 <PendSV_Handler+0x1c0>)
 800047c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	3a04      	subs	r2, #4
 8000484:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r9" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000486:	4b4b      	ldr	r3, [pc, #300]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000488:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	464a      	mov	r2, r9
 8000490:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 8000492:	4b48      	ldr	r3, [pc, #288]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000494:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000498:	699a      	ldr	r2, [r3, #24]
 800049a:	3a04      	subs	r2, #4
 800049c:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r10" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 800049e:	4b45      	ldr	r3, [pc, #276]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4652      	mov	r2, sl
 80004a8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTask->Current_PSP--;
 80004aa:	4b42      	ldr	r3, [pc, #264]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	3a04      	subs	r2, #4
 80004b4:	619a      	str	r2, [r3, #24]
	__asm volatile("mov %0,r11" : "=r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004b8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	465a      	mov	r2, fp
 80004c0:	601a      	str	r2, [r3, #0]


	//====================================
	//Save the Context of the Current Task
	//====================================
	if(OS_Control.NextTask != NULL)
 80004c2:	4b3c      	ldr	r3, [pc, #240]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004c4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d009      	beq.n	80004e0 <PendSV_Handler+0xec>
	{
	OS_Control.CurrentTask = OS_Control.NextTask ;
 80004cc:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ce:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80004d2:	4a38      	ldr	r2, [pc, #224]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004d4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTask = NULL;
 80004d8:	4b36      	ldr	r3, [pc, #216]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}
	__asm volatile("mov r11,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004e0:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	469b      	mov	fp, r3
	OS_Control.CurrentTask->Current_PSP++;
 80004ec:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004ee:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	3204      	adds	r2, #4
 80004f6:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r10,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <PendSV_Handler+0x1c0>)
 80004fa:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	469a      	mov	sl, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000504:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000506:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	3204      	adds	r2, #4
 800050e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r9,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000510:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000512:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4699      	mov	r9, r3
	OS_Control.CurrentTask->Current_PSP++;
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <PendSV_Handler+0x1c0>)
 800051e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000522:	699a      	ldr	r2, [r3, #24]
 8000524:	3204      	adds	r2, #4
 8000526:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r8,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000528:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <PendSV_Handler+0x1c0>)
 800052a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4698      	mov	r8, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000536:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800053a:	699a      	ldr	r2, [r3, #24]
 800053c:	3204      	adds	r2, #4
 800053e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r7,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000542:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	461f      	mov	r7, r3
	OS_Control.CurrentTask->Current_PSP++;
 800054c:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <PendSV_Handler+0x1c0>)
 800054e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000552:	699a      	ldr	r2, [r3, #24]
 8000554:	3204      	adds	r2, #4
 8000556:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r6,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000558:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <PendSV_Handler+0x1c0>)
 800055a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	461e      	mov	r6, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000564:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000566:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	3204      	adds	r2, #4
 800056e:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r5,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000572:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	461d      	mov	r5, r3
	OS_Control.CurrentTask->Current_PSP++;
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <PendSV_Handler+0x1c0>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	3204      	adds	r2, #4
 8000586:	619a      	str	r2, [r3, #24]
	__asm volatile("mov r4,%0" : : "r" (*(OS_Control.CurrentTask->Current_PSP)) );
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <PendSV_Handler+0x1c0>)
 800058a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	461c      	mov	r4, r3
	OS_Control.CurrentTask->Current_PSP++;
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <PendSV_Handler+0x1c0>)
 8000596:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	3204      	adds	r2, #4
 800059e:	619a      	str	r2, [r3, #24]

	//update PSP and exit
	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <PendSV_Handler+0x1c0>)
 80005a2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f380 8809 	msr	PSP, r0
	__asm volatile("BX LR");
 80005ae:	4770      	bx	lr

}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	200000e8 	.word	0x200000e8

080005b8 <MYRTOS_Idle_Task>:

void MYRTOS_Idle_Task()
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
	while (1)
	{
		IdleTaskLED ^= 1;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <MYRTOS_Idle_Task+0x18>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	f083 0301 	eor.w	r3, r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	4b02      	ldr	r3, [pc, #8]	; (80005d0 <MYRTOS_Idle_Task+0x18>)
 80005c8:	701a      	strb	r2, [r3, #0]
		__asm("wfe");
 80005ca:	bf20      	wfe
		IdleTaskLED ^= 1;
 80005cc:	e7f6      	b.n	80005bc <MYRTOS_Idle_Task+0x4>
 80005ce:	bf00      	nop
 80005d0:	200002d8 	.word	0x200002d8

080005d4 <MYRTOS_Create_MainStack>:
	}
}


void MYRTOS_Create_MainStack()
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
	OS_Control._S_MSP_Task = &_estack;
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <MYRTOS_Create_MainStack+0x34>)
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005dc:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP_Task = OS_Control._S_MSP_Task - MainStackSize;
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005e2:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 80005e6:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 80005ea:	4a08      	ldr	r2, [pc, #32]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005ec:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	//Aligned 8 Bytes spaces between main task and PSP tasks
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP_Task - 8 );
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005f2:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80005f6:	3b08      	subs	r3, #8
 80005f8:	4a04      	ldr	r2, [pc, #16]	; (800060c <MYRTOS_Create_MainStack+0x38>)
 80005fa:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//if (_E_MSP_Task < &_eheap) Error:excedded the available stack size

}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20005000 	.word	0x20005000
 800060c:	200000e8 	.word	0x200000e8

08000610 <MYRTOS_init>:



MYRTOS_errorID MYRTOS_init()
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = NoError ;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]

	//Update OS Mode (OSsuspend)
	OS_Control.OSmodeID = OSsuspend;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MYRTOS_init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	//Specify the Main Stack for OS
	MYRTOS_Create_MainStack();
 8000622:	f7ff ffd7 	bl	80005d4 <MYRTOS_Create_MainStack>

	//Create OS Ready Queue
	if (FIFO_init(&Ready_Queue, Ready_Queue_FIFO, 100) != FIFO_NO_ERROR)
 8000626:	2264      	movs	r2, #100	; 0x64
 8000628:	4913      	ldr	r1, [pc, #76]	; (8000678 <MYRTOS_init+0x68>)
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <MYRTOS_init+0x6c>)
 800062c:	f7ff fe40 	bl	80002b0 <FIFO_init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <MYRTOS_init+0x2c>
		error += Ready_Queue_init_error;
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	3301      	adds	r3, #1
 800063a:	71fb      	strb	r3, [r7, #7]

	//Configure IDLE Task
	strcpy (MYRTOS_idleTask.TaskName , "idleTask");
 800063c:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MYRTOS_init+0x70>)
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <MYRTOS_init+0x74>)
 8000640:	ca07      	ldmia	r2, {r0, r1, r2}
 8000642:	c303      	stmia	r3!, {r0, r1}
 8000644:	701a      	strb	r2, [r3, #0]
	MYRTOS_idleTask.priority = 255;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MYRTOS_init+0x78>)
 8000648:	22ff      	movs	r2, #255	; 0xff
 800064a:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = MYRTOS_Idle_Task ;
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MYRTOS_init+0x78>)
 800064e:	4a0f      	ldr	r2, [pc, #60]	; (800068c <MYRTOS_init+0x7c>)
 8000650:	609a      	str	r2, [r3, #8]
	MYRTOS_idleTask.Stack_Size = 300;
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MYRTOS_init+0x78>)
 8000654:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000658:	601a      	str	r2, [r3, #0]

	error += MYRTOS_CreateTask(&MYRTOS_idleTask);
 800065a:	480b      	ldr	r0, [pc, #44]	; (8000688 <MYRTOS_init+0x78>)
 800065c:	f000 f856 	bl	800070c <MYRTOS_CreateTask>
 8000660:	4603      	mov	r3, r0
 8000662:	461a      	mov	r2, r3
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4413      	add	r3, r2
 8000668:	71fb      	strb	r3, [r7, #7]




	return error ;
 800066a:	79fb      	ldrb	r3, [r7, #7]

}
 800066c:	4618      	mov	r0, r3
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000e8 	.word	0x200000e8
 8000678:	200002dc 	.word	0x200002dc
 800067c:	200000d4 	.word	0x200000d4
 8000680:	200002b0 	.word	0x200002b0
 8000684:	08001284 	.word	0x08001284
 8000688:	20000294 	.word	0x20000294
 800068c:	080005b9 	.word	0x080005b9

08000690 <MyRTOS_Create_Task_Stack>:


void MyRTOS_Create_Task_Stack(Task_ref* Tref)
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	 * r12
	 * r4,r3,r2,r1,r0
	 * =====================
	 * r5,r6,r7,r8,r9,r11 (Saved/Restore) Manual
	 */
	Tref->Current_PSP = Tref->_S_PSP_Task ;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	691b      	ldr	r3, [r3, #16]
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	619a      	str	r2, [r3, #24]

	Tref->Current_PSP--;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	1f1a      	subs	r2, r3, #4
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0x01000000; // DUMMY_XPSR should T = 1 to avoid BUS fault
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80006b4:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	1f1a      	subs	r2, r3, #4
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = (unsigned int)Tref->p_TaskEntry ; //PC
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689a      	ldr	r2, [r3, #8]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	601a      	str	r2, [r3, #0]

	Tref->Current_PSP--; //LR = 0xFFFFFFFD (EXC_RETURN) Return to thread and PSP stack
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	1f1a      	subs	r2, r3, #4
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	619a      	str	r2, [r3, #24]
	*(Tref->Current_PSP) = 0xFFFFFFFD ;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	f06f 0202 	mvn.w	r2, #2
 80006dc:	601a      	str	r2, [r3, #0]

	for (int j=0; j<13;j++)
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
 80006e2:	e00b      	b.n	80006fc <MyRTOS_Create_Task_Stack+0x6c>
	{
		Tref->Current_PSP--;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	1f1a      	subs	r2, r3, #4
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	619a      	str	r2, [r3, #24]
		*(Tref->Current_PSP) = 0;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
	for (int j=0; j<13;j++)
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	3301      	adds	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	ddf0      	ble.n	80006e4 <MyRTOS_Create_Task_Stack+0x54>
	}


}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr

0800070c <MYRTOS_CreateTask>:




MYRTOS_errorID MYRTOS_CreateTask(Task_ref* Tref)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID error = NoError ;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

	//Create its own PSP stack
	//Check task stack size exceeded the PSP stack
	Tref->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MYRTOS_CreateTask+0x64>)
 800071a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	611a      	str	r2, [r3, #16]
	Tref->_E_PSP_Task = Tref->_S_PSP_Task - Tref->Stack_Size;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	1ad2      	subs	r2, r2, r3
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
	{
		//return Task_exceeded_StackSize;
	}

	//Aligned 8 Bytes spaces between Task PSP and other
	OS_Control.PSP_Task_Locator = (Tref->_E_PSP_Task - 8 );
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	695b      	ldr	r3, [r3, #20]
 8000734:	3b08      	subs	r3, #8
 8000736:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <MYRTOS_CreateTask+0x64>)
 8000738:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	//Initialize PSP Task stack
	MyRTOS_Create_Task_Stack(Tref);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ffa7 	bl	8000690 <MyRTOS_Create_Task_Stack>

	//update sch Table
	OS_Control.OSTasks[OS_Control.NoOfActiveTasks] = Tref;
 8000742:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <MYRTOS_CreateTask+0x64>)
 8000744:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000748:	4909      	ldr	r1, [pc, #36]	; (8000770 <MYRTOS_CreateTask+0x64>)
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.NoOfActiveTasks++;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <MYRTOS_CreateTask+0x64>)
 8000752:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000756:	3301      	adds	r3, #1
 8000758:	4a05      	ldr	r2, [pc, #20]	; (8000770 <MYRTOS_CreateTask+0x64>)
 800075a:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	//Task State Update -> Suspend
	Tref->TaskState = Suspend;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2200      	movs	r2, #0
 8000762:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	return error ;
 8000766:	7bfb      	ldrb	r3, [r7, #15]

}
 8000768:	4618      	mov	r0, r3
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000e8 	.word	0x200000e8

08000774 <bubblesort>:

//Handler Mode
void bubblesort()
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_ref* temp;
	n = OS_Control.NoOfActiveTasks;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <bubblesort+0x8c>)
 800077c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000780:	607b      	str	r3, [r7, #4]
	for (i=0 ; i<n-1 ; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	e030      	b.n	80007ea <bubblesort+0x76>
		for (j=0 ; j<n-i-1 ; j++)
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	e023      	b.n	80007d6 <bubblesort+0x62>
			if(OS_Control.OSTasks[j]->priority > OS_Control.OSTasks[j+1]->priority)
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <bubblesort+0x8c>)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000796:	791a      	ldrb	r2, [r3, #4]
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	3301      	adds	r3, #1
 800079c:	4918      	ldr	r1, [pc, #96]	; (8000800 <bubblesort+0x8c>)
 800079e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007a2:	791b      	ldrb	r3, [r3, #4]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d913      	bls.n	80007d0 <bubblesort+0x5c>
			{
				temp = OS_Control.OSTasks[j];
 80007a8:	4a15      	ldr	r2, [pc, #84]	; (8000800 <bubblesort+0x8c>)
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b0:	603b      	str	r3, [r7, #0]
				OS_Control.OSTasks[j] = OS_Control.OSTasks[j+1];
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <bubblesort+0x8c>)
 80007b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007bc:	4910      	ldr	r1, [pc, #64]	; (8000800 <bubblesort+0x8c>)
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OSTasks[j+1] = temp;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	3301      	adds	r3, #1
 80007c8:	490d      	ldr	r1, [pc, #52]	; (8000800 <bubblesort+0x8c>)
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j=0 ; j<n-i-1 ; j++)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	3301      	adds	r3, #1
 80007d4:	60bb      	str	r3, [r7, #8]
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	1ad3      	subs	r3, r2, r3
 80007dc:	3b01      	subs	r3, #1
 80007de:	68ba      	ldr	r2, [r7, #8]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3d4      	bcc.n	800078e <bubblesort+0x1a>
	for (i=0 ; i<n-1 ; i++)
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	3301      	adds	r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3b01      	subs	r3, #1
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d3c9      	bcc.n	8000788 <bubblesort+0x14>
			}
}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200000e8 	.word	0x200000e8

08000804 <MYRTOS_Update_Scheduler_Table>:


//Handler Mode
void MYRTOS_Update_Scheduler_Table()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
	Task_ref* temp = NULL;
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
	Task_ref* Ptask;
	Task_ref* PnextTask;
	int i =0;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]

	//1- bubble sort SchTable OS_Control-> OSTASKS[100] (priority high then low)
	bubblesort();
 8000812:	f7ff ffaf 	bl	8000774 <bubblesort>

	//2- free ready queue
	while(FIFO_dequeue(&Ready_Queue, &temp) != FIFO_EMPTY);
 8000816:	bf00      	nop
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	482b      	ldr	r0, [pc, #172]	; (80008cc <MYRTOS_Update_Scheduler_Table+0xc8>)
 800081e:	f7ff fdab 	bl	8000378 <FIFO_dequeue>
 8000822:	4603      	mov	r3, r0
 8000824:	2b02      	cmp	r3, #2
 8000826:	d1f7      	bne.n	8000818 <MYRTOS_Update_Scheduler_Table+0x14>

	//3- update ready queue
	while(i < OS_Control.NoOfActiveTasks)
 8000828:	e044      	b.n	80008b4 <MYRTOS_Update_Scheduler_Table+0xb0>
	{
		Ptask = OS_Control.OSTasks[i];
 800082a:	4a29      	ldr	r2, [pc, #164]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xcc>)
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000832:	60bb      	str	r3, [r7, #8]
		PnextTask = OS_Control.OSTasks[i+1];
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	3301      	adds	r3, #1
 8000838:	4a25      	ldr	r2, [pc, #148]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xcc>)
 800083a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083e:	607b      	str	r3, [r7, #4]
		if(Ptask->TaskState != Suspend)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000846:	2b00      	cmp	r3, #0
 8000848:	d031      	beq.n	80008ae <MYRTOS_Update_Scheduler_Table+0xaa>
		{
			//in case we reached to the end of available OSTASKS
			if(PnextTask->TaskState == Suspend)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000850:	2b00      	cmp	r3, #0
 8000852:	d108      	bne.n	8000866 <MYRTOS_Update_Scheduler_Table+0x62>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000854:	68b9      	ldr	r1, [r7, #8]
 8000856:	481d      	ldr	r0, [pc, #116]	; (80008cc <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000858:	f7ff fd4c 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready;
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	2203      	movs	r2, #3
 8000860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000864:	e02e      	b.n	80008c4 <MYRTOS_Update_Scheduler_Table+0xc0>
			}
			//if the Ptask priority > next task then (lowest number is meaning higher priority)
			if(Ptask->priority < PnextTask->priority)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	791a      	ldrb	r2, [r3, #4]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	d208      	bcs.n	8000884 <MYRTOS_Update_Scheduler_Table+0x80>
			{
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	4815      	ldr	r0, [pc, #84]	; (80008cc <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000876:	f7ff fd3d 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready;
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2203      	movs	r2, #3
 800087e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
				break;
 8000882:	e01f      	b.n	80008c4 <MYRTOS_Update_Scheduler_Table+0xc0>
			}else if(Ptask->priority == PnextTask->priority)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	791a      	ldrb	r2, [r3, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	429a      	cmp	r2, r3
 800088e:	d108      	bne.n	80008a2 <MYRTOS_Update_Scheduler_Table+0x9e>
			{
				//if the Ptask priority == next task then push Ptask to ready state
				//make the Ptask = next task and nexttask++
				FIFO_enqueue(&Ready_Queue, Ptask);
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <MYRTOS_Update_Scheduler_Table+0xc8>)
 8000894:	f7ff fd2e 	bl	80002f4 <FIFO_enqueue>
				Ptask->TaskState = ready;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2203      	movs	r2, #3
 800089c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80008a0:	e005      	b.n	80008ae <MYRTOS_Update_Scheduler_Table+0xaa>
			}else if (Ptask->priority > PnextTask->priority)
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	791a      	ldrb	r2, [r3, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	791b      	ldrb	r3, [r3, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d809      	bhi.n	80008c2 <MYRTOS_Update_Scheduler_Table+0xbe>
				//not allowed to happen as we already reordered it by bubble sort
				break;
			}

		}
		i++;
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3301      	adds	r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
	while(i < OS_Control.NoOfActiveTasks)
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MYRTOS_Update_Scheduler_Table+0xcc>)
 80008b6:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d8b4      	bhi.n	800082a <MYRTOS_Update_Scheduler_Table+0x26>
	}


}
 80008c0:	e000      	b.n	80008c4 <MYRTOS_Update_Scheduler_Table+0xc0>
				break;
 80008c2:	bf00      	nop
}
 80008c4:	bf00      	nop
 80008c6:	3710      	adds	r7, #16
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000d4 	.word	0x200000d4
 80008d0:	200000e8 	.word	0x200000e8

080008d4 <Decide_whatNext>:


//Handler Mode
void Decide_whatNext()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	//if ready queue is empty && OS_Control->CurrentTask != suspend
	if(Ready_Queue.counter == 0 && OS_Control.CurrentTask->TaskState != Suspend)
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <Decide_whatNext+0x98>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d11a      	bne.n	8000916 <Decide_whatNext+0x42>
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <Decide_whatNext+0x9c>)
 80008e2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d013      	beq.n	8000916 <Decide_whatNext+0x42>
	{
		OS_Control.CurrentTask->TaskState = Running;
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <Decide_whatNext+0x9c>)
 80008f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		//add the current task again (round robin)
		FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <Decide_whatNext+0x9c>)
 80008fc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <Decide_whatNext+0x98>)
 8000904:	f7ff fcf6 	bl	80002f4 <FIFO_enqueue>
		OS_Control.NextTask = OS_Control.CurrentTask;
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <Decide_whatNext+0x9c>)
 800090a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800090e:	4a18      	ldr	r2, [pc, #96]	; (8000970 <Decide_whatNext+0x9c>)
 8000910:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
			OS_Control.CurrentTask->TaskState = ready;
		}
	}

}
 8000914:	e027      	b.n	8000966 <Decide_whatNext+0x92>
		FIFO_dequeue(&Ready_Queue, &OS_Control.NextTask);
 8000916:	4917      	ldr	r1, [pc, #92]	; (8000974 <Decide_whatNext+0xa0>)
 8000918:	4814      	ldr	r0, [pc, #80]	; (800096c <Decide_whatNext+0x98>)
 800091a:	f7ff fd2d 	bl	8000378 <FIFO_dequeue>
		OS_Control.NextTask->TaskState = Running;
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <Decide_whatNext+0x9c>)
 8000920:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000924:	2201      	movs	r2, #1
 8000926:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		if((OS_Control.CurrentTask->priority == OS_Control.NextTask->priority) && (OS_Control.CurrentTask->TaskState != Suspend))
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <Decide_whatNext+0x9c>)
 800092c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000930:	791a      	ldrb	r2, [r3, #4]
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <Decide_whatNext+0x9c>)
 8000934:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	429a      	cmp	r2, r3
 800093c:	d113      	bne.n	8000966 <Decide_whatNext+0x92>
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <Decide_whatNext+0x9c>)
 8000940:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000944:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000948:	2b00      	cmp	r3, #0
 800094a:	d00c      	beq.n	8000966 <Decide_whatNext+0x92>
			FIFO_enqueue(&Ready_Queue, OS_Control.CurrentTask);
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <Decide_whatNext+0x9c>)
 800094e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <Decide_whatNext+0x98>)
 8000956:	f7ff fccd 	bl	80002f4 <FIFO_enqueue>
			OS_Control.CurrentTask->TaskState = ready;
 800095a:	4b05      	ldr	r3, [pc, #20]	; (8000970 <Decide_whatNext+0x9c>)
 800095c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000960:	2203      	movs	r2, #3
 8000962:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000d4 	.word	0x200000d4
 8000970:	200000e8 	.word	0x200000e8
 8000974:	2000028c 	.word	0x2000028c

08000978 <OS_SVC>:



//Handler Mode
void OS_SVC(int* StackFramePointer)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
	//r0,r1,r2,r3,r12,LR,PC,XPSR
	unsigned char SVC_Number;
	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6])-2)) ;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3318      	adds	r3, #24
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3b02      	subs	r3, #2
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73fb      	strb	r3, [r7, #15]

	switch (SVC_Number)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b00      	cmp	r3, #0
 8000990:	db1f      	blt.n	80009d2 <OS_SVC+0x5a>
 8000992:	2b01      	cmp	r3, #1
 8000994:	dd02      	ble.n	800099c <OS_SVC+0x24>
 8000996:	2b02      	cmp	r3, #2
 8000998:	d017      	beq.n	80009ca <OS_SVC+0x52>

		break;

	}

}
 800099a:	e01a      	b.n	80009d2 <OS_SVC+0x5a>
		MYRTOS_Update_Scheduler_Table();
 800099c:	f7ff ff32 	bl	8000804 <MYRTOS_Update_Scheduler_Table>
		if(OS_Control.OSmodeID == OSrunning)
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <OS_SVC+0x64>)
 80009a2:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d112      	bne.n	80009d0 <OS_SVC+0x58>
			if(strcmp(OS_Control.CurrentTask->TaskName, "idleTask") !=0)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <OS_SVC+0x64>)
 80009ac:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80009b0:	331c      	adds	r3, #28
 80009b2:	490b      	ldr	r1, [pc, #44]	; (80009e0 <OS_SVC+0x68>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fbdb 	bl	8000170 <strcmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <OS_SVC+0x58>
				Decide_whatNext();
 80009c0:	f7ff ff88 	bl	80008d4 <Decide_whatNext>
				Trigger_OS_PendSV();
 80009c4:	f7ff fc4a 	bl	800025c <Trigger_OS_PendSV>
		break;
 80009c8:	e002      	b.n	80009d0 <OS_SVC+0x58>
		MYRTOS_Update_Scheduler_Table();
 80009ca:	f7ff ff1b 	bl	8000804 <MYRTOS_Update_Scheduler_Table>
		break;
 80009ce:	e000      	b.n	80009d2 <OS_SVC+0x5a>
		break;
 80009d0:	bf00      	nop
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000e8 	.word	0x200000e8
 80009e0:	08001284 	.word	0x08001284

080009e4 <MYRTOS_OS_SVC_Set>:

//Thread Mode
void MYRTOS_OS_SVC_Set(SVC_ID id)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
	switch (id)
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d006      	beq.n	8000a02 <MYRTOS_OS_SVC_Set+0x1e>
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d006      	beq.n	8000a06 <MYRTOS_OS_SVC_Set+0x22>
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d000      	beq.n	80009fe <MYRTOS_OS_SVC_Set+0x1a>
	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}

}
 80009fc:	e005      	b.n	8000a0a <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x00");
 80009fe:	df00      	svc	0
		break;
 8000a00:	e003      	b.n	8000a0a <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x01");
 8000a02:	df01      	svc	1
		break;
 8000a04:	e001      	b.n	8000a0a <MYRTOS_OS_SVC_Set+0x26>
		__asm("svc #0x02");
 8000a06:	df02      	svc	2
		break;
 8000a08:	bf00      	nop
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <MYRTOS_ActivateTask>:

void MYRTOS_ActivateTask(Task_ref* Tref)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Waiting;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2202      	movs	r2, #2
 8000a20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f7ff ffdd 	bl	80009e4 <MYRTOS_OS_SVC_Set>

}
 8000a2a:	bf00      	nop
 8000a2c:	3708      	adds	r7, #8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <MYRTOS_TerminateTask>:
void MYRTOS_TerminateTask(Task_ref* Tref)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b082      	sub	sp, #8
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	Tref->TaskState = Suspend;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
 8000a42:	2001      	movs	r0, #1
 8000a44:	f7ff ffce 	bl	80009e4 <MYRTOS_OS_SVC_Set>

}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <MYRTOS_StartOS>:
	MYRTOS_OS_SVC_Set(SVC_TerminateTask);
}


void MYRTOS_StartOS()
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	OS_Control.OSmodeID = OSrunning;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MYRTOS_StartOS+0x54>)
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	//set default "Current Task = Idle Task"
	OS_Control.CurrentTask = &MYRTOS_idleTask;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MYRTOS_StartOS+0x54>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <MYRTOS_StartOS+0x58>)
 8000a60:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	//Activate Idle Task
	MYRTOS_ActivateTask(&MYRTOS_idleTask);
 8000a64:	4810      	ldr	r0, [pc, #64]	; (8000aa8 <MYRTOS_StartOS+0x58>)
 8000a66:	f7ff ffd5 	bl	8000a14 <MYRTOS_ActivateTask>
	//Start Ticker
	Start_Ticker(); // 1ms
 8000a6a:	f7ff fc05 	bl	8000278 <Start_Ticker>

	OS_Set_PSP(OS_Control.CurrentTask->Current_PSP);
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MYRTOS_StartOS+0x54>)
 8000a70:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	4618      	mov	r0, r3
 8000a78:	f380 8809 	msr	PSP, r0
	// Switch Thread mode from MSP to PSP (Unprivileged)
	OS_Switch_SP_to_PSP;
 8000a7c:	f3ef 8014 	mrs	r0, CONTROL
 8000a80:	f04f 0102 	mov.w	r1, #2
 8000a84:	ea40 0001 	orr.w	r0, r0, r1
 8000a88:	f380 8814 	msr	CONTROL, r0
	OS_Switch_UnPrivileged;
 8000a8c:	f3ef 8314 	mrs	r3, CONTROL
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	f383 8814 	msr	CONTROL, r3
	MYRTOS_idleTask.p_TaskEntry();
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <MYRTOS_StartOS+0x58>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	4798      	blx	r3
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000e8 	.word	0x200000e8
 8000aa8:	20000294 	.word	0x20000294

08000aac <MYRTOS_Update_tasksWaittingTime>:



void MYRTOS_Update_tasksWaittingTime()
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
	//i need select the task which its state is Suspend and TimingWaiting Blocking (From All Tasks )
	for(int i=0; i<OS_Control.NoOfActiveTasks; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	e031      	b.n	8000b1c <MYRTOS_Update_tasksWaittingTime+0x70>
	{
		if (OS_Control.OSTasks[i]->TaskState == Suspend) // it is blocking until meet the time line
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d126      	bne.n	8000b16 <MYRTOS_Update_tasksWaittingTime+0x6a>

		{
			if (OS_Control.OSTasks[i]->TimeWaiting.Blocking==enable )
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d11e      	bne.n	8000b16 <MYRTOS_Update_tasksWaittingTime+0x6a>
			{
				OS_Control.OSTasks[i]->TimeWaiting.Ticks_Count--;
 8000ad8:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ae2:	3a01      	subs	r2, #1
 8000ae4:	641a      	str	r2, [r3, #64]	; 0x40

				if (OS_Control.OSTasks[i]->TimeWaiting.Ticks_Count==0)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d110      	bne.n	8000b16 <MYRTOS_Update_tasksWaittingTime+0x6a>
				{
					OS_Control.OSTasks[i]->TimeWaiting.Blocking=disable;
 8000af4:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	2201      	movs	r2, #1
 8000afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
					OS_Control.OSTasks[i]->TaskState = Waiting;
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

					MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b10:	2002      	movs	r0, #2
 8000b12:	f7ff ff67 	bl	80009e4 <MYRTOS_OS_SVC_Set>
	for(int i=0; i<OS_Control.NoOfActiveTasks; i++)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <MYRTOS_Update_tasksWaittingTime+0x84>)
 8000b1e:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8c7      	bhi.n	8000ab8 <MYRTOS_Update_tasksWaittingTime+0xc>
				}
			}
		}
	}

}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000e8 	.word	0x200000e8

08000b34 <MYRTOS_AcquireMutex>:




MYRTOS_errorID MYRTOS_AcquireMutex(Mutex_ref* Mref , Task_ref* Tref)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	6039      	str	r1, [r7, #0]
	if(Mref->CurrentTUser == NULL) //not used
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <MYRTOS_AcquireMutex+0x1a>
	{
		Mref->CurrentTUser = Tref ;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	e010      	b.n	8000b70 <MYRTOS_AcquireMutex+0x3c>
	}else
	{
		if(Mref->NextTUser == NULL) //not pending request by any other task
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <MYRTOS_AcquireMutex+0x38>
		{
			Mref->NextTUser = Tref ;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	60da      	str	r2, [r3, #12]
			//move to Suspend state until be released
			Tref->TaskState = Suspend ;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
			//to be suspended immediately
			MYRTOS_OS_SVC_Set(SVC_TaskWaitingTime);
 8000b64:	2002      	movs	r0, #2
 8000b66:	f7ff ff3d 	bl	80009e4 <MYRTOS_OS_SVC_Set>
 8000b6a:	e001      	b.n	8000b70 <MYRTOS_AcquireMutex+0x3c>
		}else // There is a pending request by another task
		{
			return MutexisReacedToMaxNumberOfUsers ;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	e000      	b.n	8000b72 <MYRTOS_AcquireMutex+0x3e>
		}

	}
	return NoError ;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <MYRTOS_ReleaseMutex>:
void MYRTOS_ReleaseMutex(Mutex_ref* Mref)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	if(Mref->CurrentTUser != NULL)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00e      	beq.n	8000ba8 <MYRTOS_ReleaseMutex+0x2e>
	{
		Mref->CurrentTUser = Mref->NextTUser  ;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68da      	ldr	r2, [r3, #12]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	609a      	str	r2, [r3, #8]
		Mref->NextTUser  = NULL ;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
		Mref->CurrentTUser->TaskState = Waiting ;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff1e 	bl	80009e4 <MYRTOS_OS_SVC_Set>

	}

}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <EXTI0_IRQHandler>:
 * =================================================================
 *
 */

void EXTI0_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	//cleared by writing a '1' into the bit Pending register (EXTI_PR)

	EXTI->PR |= 1<0;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <EXTI0_IRQHandler+0x18>)
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <EXTI0_IRQHandler+0x18>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	6153      	str	r3, [r2, #20]
	// Call IRQ_CAll
	GP_IRQ_CallBack[0]();
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <EXTI0_IRQHandler+0x1c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4798      	blx	r3
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010400 	.word	0x40010400
 8000bcc:	20000020 	.word	0x20000020

08000bd0 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	//cleared by writing a '1' into the bit Pending register (EXTI_PR)

	EXTI->PR |= 1<1;
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <EXTI1_IRQHandler+0x18>)
 8000bd6:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <EXTI1_IRQHandler+0x18>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	6153      	str	r3, [r2, #20]
	// Call IRQ_CAll
	GP_IRQ_CallBack[1]();
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <EXTI1_IRQHandler+0x1c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4798      	blx	r3
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40010400 	.word	0x40010400
 8000bec:	20000020 	.word	0x20000020

08000bf0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	//cleared by writing a '1' into the bit Pending register (EXTI_PR)

	EXTI->PR |= 1<2;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <EXTI2_IRQHandler+0x1c>)
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <EXTI2_IRQHandler+0x1c>)
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	6153      	str	r3, [r2, #20]
	// Call IRQ_CAll
	GP_IRQ_CallBack[2]();
 8000c00:	4b03      	ldr	r3, [pc, #12]	; (8000c10 <EXTI2_IRQHandler+0x20>)
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	4798      	blx	r3

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40010400 	.word	0x40010400
 8000c10:	20000020 	.word	0x20000020

08000c14 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//cleared by writing a '1' into the bit Pending register (EXTI_PR)

	EXTI->PR |= 1<3;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <EXTI3_IRQHandler+0x1c>)
 8000c1a:	695b      	ldr	r3, [r3, #20]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <EXTI3_IRQHandler+0x1c>)
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6153      	str	r3, [r2, #20]
	// Call IRQ_CAll
	GP_IRQ_CallBack[3]();
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <EXTI3_IRQHandler+0x20>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	4798      	blx	r3
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40010400 	.word	0x40010400
 8000c34:	20000020 	.word	0x20000020

08000c38 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	//cleared by writing a '1' into the bit Pending register (EXTI_PR)

	EXTI->PR |= 1<4;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <EXTI4_IRQHandler+0x1c>)
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <EXTI4_IRQHandler+0x1c>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6153      	str	r3, [r2, #20]
	// Call IRQ_CAll
	GP_IRQ_CallBack[4]();
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <EXTI4_IRQHandler+0x20>)
 8000c4a:	691b      	ldr	r3, [r3, #16]
 8000c4c:	4798      	blx	r3
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010400 	.word	0x40010400
 8000c58:	20000020 	.word	0x20000020

08000c5c <I2C1_ER_IRQHandler>:

			/* look at Figure 278. I2C interrupt mapping diagram (page 771) */

//ERROR Hnadler 1
void I2C1_ER_IRQHandler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <I2C1_EV_IRQHandler>:

// Event Hnadler 1


void I2C1_EV_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
	volatile uint32_t dummy_read =0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
	I2C_Typedef *I2Cx = I2C1;
 8000c72:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <I2C1_EV_IRQHandler+0xe8>)
 8000c74:	617b      	str	r3, [r7, #20]


	//interrupt handler for both master and salve
	uint32_t temp1 , temp2 , temp3;

	temp1 = I2Cx->CR2 &(I2C_CR2_ITEVTEN); //interrupt event
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c7e:	613b      	str	r3, [r7, #16]
	temp2 = I2Cx->CR2 &(I2C_CR2_ITBUFEN);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c88:	60fb      	str	r3, [r7, #12]
	temp1 = I2Cx->CR2 &(I2C_SR1_STOPF);//stop flag
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	613b      	str	r3, [r7, #16]


	// Handle For interrupt generated by STOPF event
		// Note : Stop detection flag is applicable only slave mode
		if(temp1 && temp3)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00a      	beq.n	8000cb0 <I2C1_EV_IRQHandler+0x48>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d007      	beq.n	8000cb0 <I2C1_EV_IRQHandler+0x48>
		{
			//STOF flag is set
			//Clear the STOPF ( i.e 1) read SR1 2) Write to CR1 )
			I2Cx->CR1 |= 0x0000;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	601a      	str	r2, [r3, #0]
			Slave_States(I2Cx,I2C_EV_STOP);
 8000ca8:	2100      	movs	r1, #0
 8000caa:	6978      	ldr	r0, [r7, #20]
 8000cac:	f000 f85e 	bl	8000d6c <Slave_States>


		}
		//----------------------------------------------------------
		temp3  = I2Cx->SR1 & (I2C_SR1_ADDR);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by ADDR event
		//Note : When master mode : Address is sent
		//		 When Slave mode   : Address matched with own address
		if(temp1 && temp3)
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d012      	beq.n	8000ce6 <I2C1_EV_IRQHandler+0x7e>
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00f      	beq.n	8000ce6 <I2C1_EV_IRQHandler+0x7e>
		{
			// interrupt is generated because of ADDR event
			//check for device mode
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d109      	bne.n	8000ce6 <I2C1_EV_IRQHandler+0x7e>

			}else
			{
				//slave mode
				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = I2Cx->SR1;
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	607b      	str	r3, [r7, #4]
				dummy_read = I2Cx->SR2;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	607b      	str	r3, [r7, #4]
				Slave_States(I2Cx,I2C_EV_ADD_MATCHED);
 8000cde:	2101      	movs	r1, #1
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f000 f843 	bl	8000d6c <Slave_States>

			}
		}
		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_TXE);
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cee:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by TXE event
		if(temp1 && temp2 && temp3)
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d00f      	beq.n	8000d16 <I2C1_EV_IRQHandler+0xae>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00c      	beq.n	8000d16 <I2C1_EV_IRQHandler+0xae>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d009      	beq.n	8000d16 <I2C1_EV_IRQHandler+0xae>
		{
			//Check for device mode
			if(I2Cx->SR2 & (I2C_SR2_MSL))
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d103      	bne.n	8000d16 <I2C1_EV_IRQHandler+0xae>
			{

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_REQ);
 8000d0e:	2102      	movs	r1, #2
 8000d10:	6978      	ldr	r0, [r7, #20]
 8000d12:	f000 f82b 	bl	8000d6c <Slave_States>
			}
		}

		//----------------------------------------------------------

		temp3  = I2Cx->SR1 & ( I2C_SR1_RXNE);
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d1e:	60bb      	str	r3, [r7, #8]
		// Handle For interrupt generated by 	SB=1, cleared by reading SR1 register followed by writing DR register with Address.
		if(temp1 && temp2 && temp3)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00f      	beq.n	8000d46 <I2C1_EV_IRQHandler+0xde>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00c      	beq.n	8000d46 <I2C1_EV_IRQHandler+0xde>
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d009      	beq.n	8000d46 <I2C1_EV_IRQHandler+0xde>
		{
			//check device mode .
			if(I2Cx->SR2 & ( I2C_SR2_MSL))
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d103      	bne.n	8000d46 <I2C1_EV_IRQHandler+0xde>
				//The device is master

			}else
			{
				//slave
				Slave_States(I2Cx,I2C_EV_DATA_RCV);
 8000d3e:	2103      	movs	r1, #3
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f000 f813 	bl	8000d6c <Slave_States>
			}
		}



}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40005400 	.word	0x40005400

08000d54 <I2C2_ER_IRQHandler>:

//ERROR Hnadler 2
void I2C2_ER_IRQHandler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <I2C2_EV_IRQHandler>:

// Event Hnadler 2


void I2C2_EV_IRQHandler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <Slave_States>:


void Slave_States (I2C_Typedef* I2Cx  ,Slave_State state)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	70fb      	strb	r3, [r7, #3]
	uint8_t index =    I2Cx == I2C1 ? I2C1_INDEX: I2C2_INDEX ;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a30      	ldr	r2, [pc, #192]	; (8000e3c <Slave_States+0xd0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	bf14      	ite	ne
 8000d80:	2301      	movne	r3, #1
 8000d82:	2300      	moveq	r3, #0
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	73fb      	strb	r3, [r7, #15]

	switch (state)
 8000d88:	78fb      	ldrb	r3, [r7, #3]
 8000d8a:	2b04      	cmp	r3, #4
 8000d8c:	d852      	bhi.n	8000e34 <Slave_States+0xc8>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <Slave_States+0x28>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08000daf 	.word	0x08000daf
 8000d98:	08000dd1 	.word	0x08000dd1
 8000d9c:	08000de7 	.word	0x08000de7
 8000da0:	08000e09 	.word	0x08000e09
 8000da4:	08000da9 	.word	0x08000da9
	{

	case I2C_ERROR_AF:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
		{
			//Slave Shouldn't Send anything else

		}

		break ;
 8000dac:	e042      	b.n	8000e34 <Slave_States+0xc8>
	}

	case I2C_EV_STOP:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d037      	beq.n	8000e2a <Slave_States+0xbe>
		{
			//Notify APP that the Stop Condition is sent by the master
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_STOP) ;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <Slave_States+0xd4>)
 8000dbe:	212c      	movs	r1, #44	; 0x2c
 8000dc0:	fb01 f303 	mul.w	r3, r1, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3328      	adds	r3, #40	; 0x28
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2000      	movs	r0, #0
 8000dcc:	4798      	blx	r3
		}

		break ;
 8000dce:	e02c      	b.n	8000e2a <Slave_States+0xbe>
	}

	case I2C_EV_ADD_MATCHED:
	{
		//Notify APP that the Stop Condition is sent by the master
		Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_ADD_MATCHED) ;
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <Slave_States+0xd4>)
 8000dd4:	212c      	movs	r1, #44	; 0x2c
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	4413      	add	r3, r2
 8000ddc:	3328      	adds	r3, #40	; 0x28
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2001      	movs	r0, #1
 8000de2:	4798      	blx	r3

		break ;
 8000de4:	e026      	b.n	8000e34 <Slave_States+0xc8>
	}

	case I2C_EV_DATA_REQ:
	{
		//make sure that the slave is really in transmitter mode
		if(I2Cx->SR2 & ( I2C_SR2_TRA))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01d      	beq.n	8000e2e <Slave_States+0xc2>
		{
			//the APP layer should send the data (MCAL_I2C_SlaveSendData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_REQ) ;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <Slave_States+0xd4>)
 8000df6:	212c      	movs	r1, #44	; 0x2c
 8000df8:	fb01 f303 	mul.w	r3, r1, r3
 8000dfc:	4413      	add	r3, r2
 8000dfe:	3328      	adds	r3, #40	; 0x28
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2002      	movs	r0, #2
 8000e04:	4798      	blx	r3
		}

		break ;
 8000e06:	e012      	b.n	8000e2e <Slave_States+0xc2>
	}
	case I2C_EV_DATA_RCV:
	{
		//make sure that the slave is really in receiver mode
		if(!(I2Cx->SR2 & ( I2C_SR2_TRA)))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10e      	bne.n	8000e32 <Slave_States+0xc6>
		{
			//the APP layer should read the data (MCAL_I2C_SlaveReceiveData ) in this state
			Global_I2C_Config [index].P_Slave_Event_CallBack (I2C_EV_DATA_RCV) ;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <Slave_States+0xd4>)
 8000e18:	212c      	movs	r1, #44	; 0x2c
 8000e1a:	fb01 f303 	mul.w	r3, r1, r3
 8000e1e:	4413      	add	r3, r2
 8000e20:	3328      	adds	r3, #40	; 0x28
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2003      	movs	r0, #3
 8000e26:	4798      	blx	r3
		}

		break ;
 8000e28:	e003      	b.n	8000e32 <Slave_States+0xc6>
		break ;
 8000e2a:	bf00      	nop
 8000e2c:	e002      	b.n	8000e34 <Slave_States+0xc8>
		break ;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <Slave_States+0xc8>
		break ;
 8000e32:	bf00      	nop
	}
	}

}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	2000005c 	.word	0x2000005c

08000e44 <SPI1_IRQHandler>:



// IRQ
void SPI1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC  irq_src;

	irq_src.TXE = ((SPI1->SPI_SR & (1<<1))>>1);
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <SPI1_IRQHandler+0x54>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	085b      	lsrs	r3, r3, #1
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	793b      	ldrb	r3, [r7, #4]
 8000e58:	f362 0300 	bfi	r3, r2, #0, #1
 8000e5c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ((SPI1->SPI_SR & (1<<0))>>0);
 8000e5e:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <SPI1_IRQHandler+0x54>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	793b      	ldrb	r3, [r7, #4]
 8000e6a:	f362 0341 	bfi	r3, r2, #1, #1
 8000e6e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ((SPI1->SPI_SR & (1<<4))>>4);
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <SPI1_IRQHandler+0x54>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	f362 0382 	bfi	r3, r2, #2, #1
 8000e82:	713b      	strb	r3, [r7, #4]

	Global_SPI_Comfig[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SPI1_IRQHandler+0x58>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	7938      	ldrb	r0, [r7, #4]
 8000e8c:	4798      	blx	r3
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40013000 	.word	0x40013000
 8000e9c:	200000b4 	.word	0x200000b4

08000ea0 <USART1_IRQHandler>:


//ISR

void USART1_IRQHandler()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CallBack();
 8000ea4:	4b02      	ldr	r3, [pc, #8]	; (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	691b      	ldr	r3, [r3, #16]
 8000eaa:	4798      	blx	r3
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200000bc 	.word	0x200000bc

08000eb4 <USART2_IRQHandler>:


void USART2_IRQHandler()
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	Global_USART_Config->P_IRQ_CallBack();
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	4798      	blx	r3

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000bc 	.word	0x200000bc

08000ec8 <task1>:

Mutex_ref Mutex1, Mutex2 ;
unsigned char payload[3] = {1,2,3} ;

void task1()
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	static int count =0;
	while (1)
	{
		//Task 1 code
		Task1LED ^= 1;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <task1+0x50>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	f083 0301 	eor.w	r3, r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <task1+0x50>)
 8000ed8:	701a      	strb	r2, [r3, #0]

		count++;
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <task1+0x54>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a0e      	ldr	r2, [pc, #56]	; (8000f1c <task1+0x54>)
 8000ee2:	6013      	str	r3, [r2, #0]
		if (count ==100)
 8000ee4:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <task1+0x54>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b64      	cmp	r3, #100	; 0x64
 8000eea:	d10a      	bne.n	8000f02 <task1+0x3a>
		{
			MYRTOS_AcquireMutex(&Mutex1, &Task1);
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <task1+0x58>)
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <task1+0x5c>)
 8000ef0:	f7ff fe20 	bl	8000b34 <MYRTOS_AcquireMutex>
			MYRTOS_ActivateTask(&Task4);
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <task1+0x60>)
 8000ef6:	f7ff fd8d 	bl	8000a14 <MYRTOS_ActivateTask>
			MYRTOS_AcquireMutex(&Mutex2, &Task1);
 8000efa:	4909      	ldr	r1, [pc, #36]	; (8000f20 <task1+0x58>)
 8000efc:	480b      	ldr	r0, [pc, #44]	; (8000f2c <task1+0x64>)
 8000efe:	f7ff fe19 	bl	8000b34 <MYRTOS_AcquireMutex>

		}
		if (count ==200)
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <task1+0x54>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2bc8      	cmp	r3, #200	; 0xc8
 8000f08:	d1e0      	bne.n	8000ecc <task1+0x4>
		{
			count=0;
 8000f0a:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <task1+0x54>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]

			MYRTOS_ReleaseMutex(&Mutex1);
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <task1+0x5c>)
 8000f12:	f7ff fe32 	bl	8000b7a <MYRTOS_ReleaseMutex>
		Task1LED ^= 1;
 8000f16:	e7d9      	b.n	8000ecc <task1+0x4>
 8000f18:	2000059c 	.word	0x2000059c
 8000f1c:	200000c0 	.word	0x200000c0
 8000f20:	200004e0 	.word	0x200004e0
 8000f24:	2000046c 	.word	0x2000046c
 8000f28:	2000049c 	.word	0x2000049c
 8000f2c:	2000056c 	.word	0x2000056c

08000f30 <task2>:

	}
}

void task2()
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	static int count =0;
	while (1)
	{
		//Task 1 code
		Task2LED ^= 1;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <task2+0x40>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	f083 0301 	eor.w	r3, r3, #1
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <task2+0x40>)
 8000f40:	701a      	strb	r2, [r3, #0]

		count++;
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <task2+0x44>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <task2+0x44>)
 8000f4a:	6013      	str	r3, [r2, #0]
		if (count ==100)
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <task2+0x44>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b64      	cmp	r3, #100	; 0x64
 8000f52:	d102      	bne.n	8000f5a <task2+0x2a>
		{
			MYRTOS_ActivateTask(&Task3);
 8000f54:	4808      	ldr	r0, [pc, #32]	; (8000f78 <task2+0x48>)
 8000f56:	f7ff fd5d 	bl	8000a14 <MYRTOS_ActivateTask>
		}

		if (count ==200)
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <task2+0x44>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2bc8      	cmp	r3, #200	; 0xc8
 8000f60:	d1e8      	bne.n	8000f34 <task2+0x4>
		{
			count=0;
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <task2+0x44>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task2);
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <task2+0x4c>)
 8000f6a:	f7ff fd62 	bl	8000a32 <MYRTOS_TerminateTask>
		Task2LED ^= 1;
 8000f6e:	e7e1      	b.n	8000f34 <task2+0x4>
 8000f70:	20000525 	.word	0x20000525
 8000f74:	200000c4 	.word	0x200000c4
 8000f78:	20000528 	.word	0x20000528
 8000f7c:	200005a0 	.word	0x200005a0

08000f80 <task3>:

	}
}

void task3()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	static int count =0;
	while (1)
	{
		//Task 1 code
		Task3LED ^= 1;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <task3+0x40>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <task3+0x40>)
 8000f90:	701a      	strb	r2, [r3, #0]

		count++;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <task3+0x44>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <task3+0x44>)
 8000f9a:	6013      	str	r3, [r2, #0]
		if (count ==100)
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <task3+0x44>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b64      	cmp	r3, #100	; 0x64
 8000fa2:	d102      	bne.n	8000faa <task3+0x2a>
		{
			MYRTOS_ActivateTask(&Task4);
 8000fa4:	4808      	ldr	r0, [pc, #32]	; (8000fc8 <task3+0x48>)
 8000fa6:	f7ff fd35 	bl	8000a14 <MYRTOS_ActivateTask>

		}

		if (count ==200)
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <task3+0x44>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2bc8      	cmp	r3, #200	; 0xc8
 8000fb0:	d1e8      	bne.n	8000f84 <task3+0x4>
		{
			count=0;
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <task3+0x44>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
			MYRTOS_TerminateTask(&Task3);
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <task3+0x4c>)
 8000fba:	f7ff fd3a 	bl	8000a32 <MYRTOS_TerminateTask>
		Task3LED ^= 1;
 8000fbe:	e7e1      	b.n	8000f84 <task3+0x4>
 8000fc0:	200005e4 	.word	0x200005e4
 8000fc4:	200000c8 	.word	0x200000c8
 8000fc8:	2000049c 	.word	0x2000049c
 8000fcc:	20000528 	.word	0x20000528

08000fd0 <task4>:

	}
}

void task4()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	static int count =0;
	while (1)
	{
		//Task 1 code
		Task4LED ^= 1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <task4+0x50>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <task4+0x50>)
 8000fe0:	701a      	strb	r2, [r3, #0]

		count++;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <task4+0x54>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <task4+0x54>)
 8000fea:	6013      	str	r3, [r2, #0]


		if (count ==3)
 8000fec:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <task4+0x54>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d107      	bne.n	8001004 <task4+0x34>
		{
			MYRTOS_AcquireMutex(&Mutex2, &Task4);
 8000ff4:	490c      	ldr	r1, [pc, #48]	; (8001028 <task4+0x58>)
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <task4+0x5c>)
 8000ff8:	f7ff fd9c 	bl	8000b34 <MYRTOS_AcquireMutex>


			MYRTOS_AcquireMutex(&Mutex1, &Task4);
 8000ffc:	490a      	ldr	r1, [pc, #40]	; (8001028 <task4+0x58>)
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <task4+0x60>)
 8001000:	f7ff fd98 	bl	8000b34 <MYRTOS_AcquireMutex>

		}


		if (count ==200)
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <task4+0x54>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2bc8      	cmp	r3, #200	; 0xc8
 800100a:	d1e3      	bne.n	8000fd4 <task4+0x4>
		{
			count=0;
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <task4+0x54>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
			MYRTOS_ReleaseMutex(&Mutex1);
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <task4+0x60>)
 8001014:	f7ff fdb1 	bl	8000b7a <MYRTOS_ReleaseMutex>

			MYRTOS_TerminateTask(&Task4);
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <task4+0x58>)
 800101a:	f7ff fd0a 	bl	8000a32 <MYRTOS_TerminateTask>
		Task4LED ^= 1;
 800101e:	e7d9      	b.n	8000fd4 <task4+0x4>
 8001020:	20000524 	.word	0x20000524
 8001024:	200000cc 	.word	0x200000cc
 8001028:	2000049c 	.word	0x2000049c
 800102c:	2000056c 	.word	0x2000056c
 8001030:	2000046c 	.word	0x2000046c

08001034 <main>:
	}
}


int main(void)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	MYRTOS_errorID error = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]
	//HW_init (initialize clock Tree, Reset controller)
	HW_init();
 800103e:	f7ff f903 	bl	8000248 <HW_init>

	if ( MYRTOS_init() != NoError )
 8001042:	f7ff fae5 	bl	8000610 <MYRTOS_init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d000      	beq.n	800104e <main+0x1a>
		while (1);
 800104c:	e7fe      	b.n	800104c <main+0x18>


	Mutex1.PayloadSize = 3 ;
 800104e:	4b49      	ldr	r3, [pc, #292]	; (8001174 <main+0x140>)
 8001050:	2203      	movs	r2, #3
 8001052:	605a      	str	r2, [r3, #4]
	Mutex1.Ppayload = payload ;
 8001054:	4b47      	ldr	r3, [pc, #284]	; (8001174 <main+0x140>)
 8001056:	4a48      	ldr	r2, [pc, #288]	; (8001178 <main+0x144>)
 8001058:	601a      	str	r2, [r3, #0]
	strcpy (Mutex1.MutexName, "mutex1_shared_T1_T4");
 800105a:	4a48      	ldr	r2, [pc, #288]	; (800117c <main+0x148>)
 800105c:	4b48      	ldr	r3, [pc, #288]	; (8001180 <main+0x14c>)
 800105e:	4614      	mov	r4, r2
 8001060:	461d      	mov	r5, r3
 8001062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	6023      	str	r3, [r4, #0]


	Mutex2.PayloadSize = 3 ;
 800106a:	4b46      	ldr	r3, [pc, #280]	; (8001184 <main+0x150>)
 800106c:	2203      	movs	r2, #3
 800106e:	605a      	str	r2, [r3, #4]
	Mutex2.Ppayload = payload ;
 8001070:	4b44      	ldr	r3, [pc, #272]	; (8001184 <main+0x150>)
 8001072:	4a41      	ldr	r2, [pc, #260]	; (8001178 <main+0x144>)
 8001074:	601a      	str	r2, [r3, #0]
	strcpy (Mutex2.MutexName, "mutex2_shared_T1_T4");
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <main+0x154>)
 8001078:	4b44      	ldr	r3, [pc, #272]	; (800118c <main+0x158>)
 800107a:	4614      	mov	r4, r2
 800107c:	461d      	mov	r5, r3
 800107e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001082:	682b      	ldr	r3, [r5, #0]
 8001084:	6023      	str	r3, [r4, #0]


	Task1.Stack_Size = 1024;
 8001086:	4b42      	ldr	r3, [pc, #264]	; (8001190 <main+0x15c>)
 8001088:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800108c:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = task1;
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <main+0x15c>)
 8001090:	4a40      	ldr	r2, [pc, #256]	; (8001194 <main+0x160>)
 8001092:	609a      	str	r2, [r3, #8]
	Task1.priority = 4;
 8001094:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <main+0x15c>)
 8001096:	2204      	movs	r2, #4
 8001098:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName , "task_1");
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <main+0x164>)
 800109c:	4a3f      	ldr	r2, [pc, #252]	; (800119c <main+0x168>)
 800109e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010a2:	6018      	str	r0, [r3, #0]
 80010a4:	3304      	adds	r3, #4
 80010a6:	8019      	strh	r1, [r3, #0]
 80010a8:	3302      	adds	r3, #2
 80010aa:	0c0a      	lsrs	r2, r1, #16
 80010ac:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;
 80010ae:	4b3c      	ldr	r3, [pc, #240]	; (80011a0 <main+0x16c>)
 80010b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b4:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = task2;
 80010b6:	4b3a      	ldr	r3, [pc, #232]	; (80011a0 <main+0x16c>)
 80010b8:	4a3a      	ldr	r2, [pc, #232]	; (80011a4 <main+0x170>)
 80010ba:	609a      	str	r2, [r3, #8]
	Task2.priority = 3;
 80010bc:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <main+0x16c>)
 80010be:	2203      	movs	r2, #3
 80010c0:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName , "task_2");
 80010c2:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <main+0x174>)
 80010c4:	4a39      	ldr	r2, [pc, #228]	; (80011ac <main+0x178>)
 80010c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ca:	6018      	str	r0, [r3, #0]
 80010cc:	3304      	adds	r3, #4
 80010ce:	8019      	strh	r1, [r3, #0]
 80010d0:	3302      	adds	r3, #2
 80010d2:	0c0a      	lsrs	r2, r1, #16
 80010d4:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;
 80010d6:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <main+0x17c>)
 80010d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010dc:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = task3;
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <main+0x17c>)
 80010e0:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <main+0x180>)
 80010e2:	609a      	str	r2, [r3, #8]
	Task3.priority = 2;
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <main+0x17c>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName , "task_3");
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <main+0x184>)
 80010ec:	4a33      	ldr	r2, [pc, #204]	; (80011bc <main+0x188>)
 80010ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010f2:	6018      	str	r0, [r3, #0]
 80010f4:	3304      	adds	r3, #4
 80010f6:	8019      	strh	r1, [r3, #0]
 80010f8:	3302      	adds	r3, #2
 80010fa:	0c0a      	lsrs	r2, r1, #16
 80010fc:	701a      	strb	r2, [r3, #0]


	Task4.Stack_Size = 1024;
 80010fe:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <main+0x18c>)
 8001100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001104:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry = task4;
 8001106:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <main+0x18c>)
 8001108:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <main+0x190>)
 800110a:	609a      	str	r2, [r3, #8]
	Task4.priority = 1;
 800110c:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <main+0x18c>)
 800110e:	2201      	movs	r2, #1
 8001110:	711a      	strb	r2, [r3, #4]
	strcpy(Task4.TaskName , "task_4");
 8001112:	4b2d      	ldr	r3, [pc, #180]	; (80011c8 <main+0x194>)
 8001114:	4a2d      	ldr	r2, [pc, #180]	; (80011cc <main+0x198>)
 8001116:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111a:	6018      	str	r0, [r3, #0]
 800111c:	3304      	adds	r3, #4
 800111e:	8019      	strh	r1, [r3, #0]
 8001120:	3302      	adds	r3, #2
 8001122:	0c0a      	lsrs	r2, r1, #16
 8001124:	701a      	strb	r2, [r3, #0]

	error += MYRTOS_CreateTask(&Task1);
 8001126:	481a      	ldr	r0, [pc, #104]	; (8001190 <main+0x15c>)
 8001128:	f7ff faf0 	bl	800070c <MYRTOS_CreateTask>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	4413      	add	r3, r2
 8001134:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task2);
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <main+0x16c>)
 8001138:	f7ff fae8 	bl	800070c <MYRTOS_CreateTask>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4413      	add	r3, r2
 8001144:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task3);
 8001146:	481a      	ldr	r0, [pc, #104]	; (80011b0 <main+0x17c>)
 8001148:	f7ff fae0 	bl	800070c <MYRTOS_CreateTask>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4413      	add	r3, r2
 8001154:	71fb      	strb	r3, [r7, #7]
	error += MYRTOS_CreateTask(&Task4);
 8001156:	481a      	ldr	r0, [pc, #104]	; (80011c0 <main+0x18c>)
 8001158:	f7ff fad8 	bl	800070c <MYRTOS_CreateTask>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4413      	add	r3, r2
 8001164:	71fb      	strb	r3, [r7, #7]


	MYRTOS_ActivateTask(&Task1);
 8001166:	480a      	ldr	r0, [pc, #40]	; (8001190 <main+0x15c>)
 8001168:	f7ff fc54 	bl	8000a14 <MYRTOS_ActivateTask>

	MYRTOS_StartOS();
 800116c:	f7ff fc70 	bl	8000a50 <MYRTOS_StartOS>

	while(1)
 8001170:	e7fe      	b.n	8001170 <main+0x13c>
 8001172:	bf00      	nop
 8001174:	2000046c 	.word	0x2000046c
 8001178:	20000000 	.word	0x20000000
 800117c:	2000047c 	.word	0x2000047c
 8001180:	08001290 	.word	0x08001290
 8001184:	2000056c 	.word	0x2000056c
 8001188:	2000057c 	.word	0x2000057c
 800118c:	080012a4 	.word	0x080012a4
 8001190:	200004e0 	.word	0x200004e0
 8001194:	08000ec9 	.word	0x08000ec9
 8001198:	200004fc 	.word	0x200004fc
 800119c:	080012b8 	.word	0x080012b8
 80011a0:	200005a0 	.word	0x200005a0
 80011a4:	08000f31 	.word	0x08000f31
 80011a8:	200005bc 	.word	0x200005bc
 80011ac:	080012c0 	.word	0x080012c0
 80011b0:	20000528 	.word	0x20000528
 80011b4:	08000f81 	.word	0x08000f81
 80011b8:	20000544 	.word	0x20000544
 80011bc:	080012c8 	.word	0x080012c8
 80011c0:	2000049c 	.word	0x2000049c
 80011c4:	08000fd1 	.word	0x08000fd1
 80011c8:	200004b8 	.word	0x200004b8
 80011cc:	080012d0 	.word	0x080012d0

080011d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011fe:	f000 f811 	bl	8001224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001202:	f7ff ff17 	bl	8001034 <main>

08001206 <LoopForever>:

LoopForever:
  b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   r0, =_estack
 8001208:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001214:	080012e0 	.word	0x080012e0
  ldr r2, =_sbss
 8001218:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800121c:	200005e8 	.word	0x200005e8

08001220 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_2_IRQHandler>
	...

08001224 <__libc_init_array>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	2500      	movs	r5, #0
 8001228:	4e0c      	ldr	r6, [pc, #48]	; (800125c <__libc_init_array+0x38>)
 800122a:	4c0d      	ldr	r4, [pc, #52]	; (8001260 <__libc_init_array+0x3c>)
 800122c:	1ba4      	subs	r4, r4, r6
 800122e:	10a4      	asrs	r4, r4, #2
 8001230:	42a5      	cmp	r5, r4
 8001232:	d109      	bne.n	8001248 <__libc_init_array+0x24>
 8001234:	f000 f81a 	bl	800126c <_init>
 8001238:	2500      	movs	r5, #0
 800123a:	4e0a      	ldr	r6, [pc, #40]	; (8001264 <__libc_init_array+0x40>)
 800123c:	4c0a      	ldr	r4, [pc, #40]	; (8001268 <__libc_init_array+0x44>)
 800123e:	1ba4      	subs	r4, r4, r6
 8001240:	10a4      	asrs	r4, r4, #2
 8001242:	42a5      	cmp	r5, r4
 8001244:	d105      	bne.n	8001252 <__libc_init_array+0x2e>
 8001246:	bd70      	pop	{r4, r5, r6, pc}
 8001248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800124c:	4798      	blx	r3
 800124e:	3501      	adds	r5, #1
 8001250:	e7ee      	b.n	8001230 <__libc_init_array+0xc>
 8001252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001256:	4798      	blx	r3
 8001258:	3501      	adds	r5, #1
 800125a:	e7f2      	b.n	8001242 <__libc_init_array+0x1e>
 800125c:	080012d8 	.word	0x080012d8
 8001260:	080012d8 	.word	0x080012d8
 8001264:	080012d8 	.word	0x080012d8
 8001268:	080012dc 	.word	0x080012dc

0800126c <_init>:
 800126c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800126e:	bf00      	nop
 8001270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001272:	bc08      	pop	{r3}
 8001274:	469e      	mov	lr, r3
 8001276:	4770      	bx	lr

08001278 <_fini>:
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	bf00      	nop
 800127c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127e:	bc08      	pop	{r3}
 8001280:	469e      	mov	lr, r3
 8001282:	4770      	bx	lr
